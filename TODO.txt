Fazendo:

GameState
  ParticleEmitterSystem
    ParticleEmitter
      TransformComponent
      EmitterComponent
			Timer
        int Particle
        map TransformComponent
        map RenderComponent
        map TimerComponent


A fazer:

- Acrescentar largura, altura, escala e rotação na transform component;
- Acrescentar argumentos nos construtores dos components;
- DELETAR PONTEIROS!!!!!!!!!!!!!!!!!!!
- Tirar create dos states;


============== ESSA SEMANA ==================

Player
Inimigos
Particle System
Colisao especial pros diagonais
menu

=============== ENTREGAS ====================

Segunda entrega / 17

	Luiz
		Particle System
			Chuva
			Neve
			Vento

		Inimigos
			IA
				Coisa -> Zip Zag -> Distancia
				Coisa -> Segue e para depois de uma distancia
				Cerberus -> Bloca a passagem
				Macaco -> Inimigo
				Boss
				Bicho que segue
		NPC
			Moça da Musica -> Chuva + Movimento de NPC + GC
			Cachorro -> Dorme

		Text

	Victor
		Colisao
			Colisao entre objetos / entities
			Colisores Diagonais
			Triggers
			Atravessar plataformas
				(de baixo para cima)

	Thales
		Sons
			Efeitos
			Musicas
		Objetos quebraveis
		Checkpoints
		Switchs

	Victor & Thales
			Player
				Zip line

	Victor & Thales feat Luiz
			Menu
				Muitas telas
			Gamepad
			Player
				Ataque
				Dano de Queda
				Planar


===

Terceira entrega / 6
	Selecionar tile set / tile map;


===========================================================



StateComponent
{
	State* state; // Idle, Walking, Jumping, Attacking -> igual para player, inimigos e objetos 
}

PlayerStateComponent : StateComponent
{
	State* umbrellaState // Open, closed -> só pro player
	State* umbrellaDirection // Up, down, left, right
}



InputSystem::update
{
	if (input.keyPress(RIGHT))
		if (state == Falling)
			speed.x = SPEED
		else
			speed.x = SPEED_JUMPING
			state.changeState(Walking)

	if (input.keyPress(UP))
		umbrellaState = UP;
}

PlayerSystem::update
{
	if (player.state == Falling AND player.umbrellaState == Open | Up)
		player.physics.gravityScale = GRAVITY_SCALE * 0.2
	if (player.state == Zipline)
		player.speed = Vec2(compX, compY)
}

GravitySystem::update
{
	if speed.y < 0
		speed.y -= GRAVITY * fator
	else
		speed.y = GRAVITY
		state.changeState(Falling) (?)
}

MoveSystem::update
{
	transform += speed * dt;
}

CollisionSystem::update
{
	if (isColliding(TERRENO))
		arruma transform
		speed.y = 0
		if (speed.x == 0)
			state.changeState(Idle)
		else
			state.changeState(Walking)
	else
		if (speed.y > 0)
			state.changeState(Falling)
}

RenderSystem::update
{
	if (player)
		if (state.hasChanged OR umbrellaState.hasChanged)
			render.setSprite(state, umbrellaState)
	else
		if (state.hasChanged)
			render.setSprite(state)
}